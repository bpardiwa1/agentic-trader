name: Deploy to VPS (manual)

on:
  workflow_dispatch:

defaults:
  run:
    shell: powershell

env:
  TARGET_ROOT: 'C:\agentic-trader'
  PY_EXE: 'C:\Users\Administrator\AppData\Local\Programs\Python\Python311\python.exe'
  VENV_DIR: '.venv'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure target dir exists
        run: |
          New-Item -ItemType Directory -Force -Path $env:TARGET_ROOT | Out-Null
          Write-Host "TARGET_ROOT = $env:TARGET_ROOT"

      # ---------- THIS is the fixed step ----------
      - name: Recreate .env from secret (multiline-safe, no here-strings)
        run: |
          $envFile = Join-Path $env:TARGET_ROOT '.env'
          $json    = '${{ toJSON(secrets.ENV_FILE_CONTENT) }}'  # one-line JSON string
          $content = ConvertFrom-Json $json                     # back to original multiline
          Set-Content -Path $envFile -Value $content -Encoding UTF8 -NoNewline
          # quick peek (first 10 lines) so you can verify it rendered correctly
          Get-Content $envFile -TotalCount 10 | ForEach-Object { "ENV: $_" }

      - name: Sync code to target (robocopy)
        run: |
          $src = "$PWD"
          $dst = $env:TARGET_ROOT
          $excludeFiles = @('.env', '.gitignore')
          $excludeDirs  = @('.git', '.github\workflows', '.venv', 'data', '__pycache__')

          $args = @($src, $dst, '*.*', '/MIR', '/NFL', '/NDL', '/NJH', '/NJS', '/NP', '/R:3', '/W:5')
          if ($excludeFiles.Count) { $args += @('/XF') + $excludeFiles }
          if ($excludeDirs.Count)  { $args += @('/XD') + $excludeDirs  }

          robocopy @args
          $code = $LASTEXITCODE
          if ($code -le 3) { Write-Host "Robocopy completed with code $code (treated as success)."; exit 0 }
          else { Write-Error "Robocopy failed with code $code"; exit $code }

      - name: Setup Python venv and install deps (explicit python.exe)
        run: |
          $python = $env:PY_EXE
          if (-not (Test-Path $python)) { throw "Configured PY_EXE not found: $python" }
          $venv = Join-Path $env:TARGET_ROOT $env:VENV_DIR
          & $python -m venv $venv
          & (Join-Path $venv 'Scripts\python.exe') -m pip install --upgrade pip
          & (Join-Path $venv 'Scripts\pip.exe') install -r (Join-Path $env:TARGET_ROOT 'requirements.txt')

      - name: Sanity check app imports (loads .env)
        run: |
          $venvPy  = Join-Path (Join-Path $env:TARGET_ROOT $env:VENV_DIR) 'Scripts\python.exe'
          $envPath = Join-Path $env:TARGET_ROOT '.env'
          $cmd = "import os; from dotenv import load_dotenv; load_dotenv(r'$envPath'); " +
                 "print('[env] PORT =', os.getenv('PORT')); " +
                 "print('[env] AGENT_SYMBOLS =', os.getenv('AGENT_SYMBOLS')); " +
                 "import app.main; print('[import] app.main OK')"
          & $venvPy -c $cmd
