name: Deploy to VPS (manual)

on:
  workflow_dispatch:

defaults:
  run:
    shell: powershell

env:
  # Where the app lives on the VPS
  TARGET_ROOT: 'C:\agentic-trader'
  # Use the explicit Python you already have installed
  PY_EXE: 'C:\Users\Administrator\AppData\Local\Programs\Python\Python311\python.exe'
  # Name for the venv (inside TARGET_ROOT)
  VENV_DIR: '.venv'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure target dir exists
        run: |
          New-Item -ItemType Directory -Force -Path $env:TARGET_ROOT | Out-Null
          Write-Host "TARGET_ROOT = $env:TARGET_ROOT"

      - name: Recreate .env from secret (multiline-safe)
        run: |
          $envFile = Join-Path $env:TARGET_ROOT '.env'
          "@
          ${{ secrets.ENV_FILE_CONTENT }}
          "@ | Set-Content -Path $envFile -Encoding UTF8 -NoNewline
          Write-Host "Wrote .env to $envFile"

      - name: Sync code to target (robocopy)
        run: |
          $src = "$PWD"
          $dst = $env:TARGET_ROOT
          $excludeFiles = @('.env', '.gitignore')
          $excludeDirs  = @('.git', '.github\workflows', '.venv', 'data', '__pycache__')

          $xf = $excludeFiles | ForEach-Object { "/XF `"$($_)`"" } | Out-String
          $xd = $excludeDirs  | ForEach-Object { "/XD `"$($_)`"" } | Out-String

          $args = @($src, $dst, '*.*', '/MIR', '/NFL', '/NDL', '/NJH', '/NJS', '/NP', '/R:3', '/W:5')
          if ($xf.Trim()) { $args += $excludeFiles | ForEach-Object { '/XF'; $_ } }
          if ($xd.Trim()) { $args += $excludeDirs  | ForEach-Object { '/XD'; $_ } }

          robocopy @args
          $code = $LASTEXITCODE
          # robocopy returns 1 when only file metadata changes or copies were made (success)
          if ($code -le 3) {
            Write-Host "Robocopy completed with code $code (treated as success)."
            exit 0
          } else {
            Write-Error "Robocopy failed with code $code"
            exit $code
          }

      - name: Setup Python venv and install deps (using explicit python.exe)
        run: |
          $python = $env:PY_EXE
          if (-not (Test-Path $python)) {
            throw "Configured PY_EXE not found: $python"
          }
          $venvPath = Join-Path $env:TARGET_ROOT $env:VENV_DIR
          & $python -m venv $venvPath
          & (Join-Path $venvPath 'Scripts\python.exe') -m pip install --upgrade pip
          & (Join-Path $venvPath 'Scripts\pip.exe') install -r (Join-Path $env:TARGET_ROOT 'requirements.txt')

      - name: Sanity check app imports (loads .env)
        run: |
          $venvPy = Join-Path (Join-Path $env:TARGET_ROOT $env:VENV_DIR) 'Scripts\python.exe'
          $py = @"
          import os
          from dotenv import load_dotenv
          load_dotenv(r'$env:TARGET_ROOT\.env')
          print('[env] PORT =', os.getenv('PORT'))
          print('[env] AGENT_SYMBOLS =', os.getenv('AGENT_SYMBOLS'))
          import app.main
          print('[import] app.main OK')
          "@
          & $venvPy - << $py
