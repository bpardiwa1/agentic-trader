name: Deploy to VPS (self-hosted Windows)

on:
  workflow_dispatch:
    inputs:
      install_deps:
        description: "Create/refresh venv and pip install -r requirements.txt"
        required: false
        default: "false"

permissions:
  contents: read

jobs:
  deploy:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure target folder exists
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path 'C:\agentic-trader' | Out-Null

      - name: Sync repo to C:\agentic-trader (preserve .venv, .env, data)
        shell: pwsh
        run: |
          $src  = "${{ github.workspace }}"
          $dest = "C:\agentic-trader"
          # /MIR mirrors but we exclude venv, .env, data, journal, and CI files
          robocopy $src $dest /MIR `
            /XD ".git" ".github" ".venv" "data" "app\journal" `
            /XF ".env" `
            /R:2 /W:2 /NFL /NDL /NP /NJH /NJS
          if ($LASTEXITCODE -ge 8) { exit $LASTEXITCODE }

      - name: Write .env from ENV_FILE_CONTENT secret
        shell: pwsh
        env:
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
        run: |
          $target = "C:\agentic-trader\.env"
          if (-not $env:ENV_FILE_CONTENT) {
            Write-Error "Secret ENV_FILE_CONTENT is empty or not set."
            exit 1
          }
          # Write exactly whatâ€™s in the secret (supports multi-line)
          $env:ENV_FILE_CONTENT | Out-File -FilePath $target -Encoding ascii -NoNewline
          Write-Host ".env updated at $target"

      - name: (Optional) Install/Update dependencies
        if: ${{ github.event.inputs.install_deps == 'true' }}
        shell: pwsh
        run: |
          Set-Location C:\agentic-trader
          if (Test-Path .venv) {
            Write-Host "Reusing existing .venv"
          } else {
            py -3 -m venv .venv
          }
          .\.venv\Scripts\python -m pip install --upgrade pip
          if (Test-Path requirements.txt) {
            .\.venv\Scripts\pip install -r requirements.txt
          } else {
            Write-Host "requirements.txt not found; skipping pip install."
          }

      - name: Done
        shell: pwsh
        run: |
          Write-Host "Deploy completed. Start/stop your NSSM services manually for now."
