name: Deploy to VPS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure target dir exists
        shell: powershell
        run: |
          $targetRoot = 'C:\agentic-trader'
          New-Item -ItemType Directory -Force -Path $targetRoot | Out-Null
          Write-Host "Ensured $targetRoot exists"

      - name: Sync repo to target (RoboCopy; 0–3 = success)
        shell: powershell
        run: |
          $src = "$((Get-Location).Path)\"
          $dst = 'C:\agentic-trader'
          $log = Join-Path $env:TEMP "robocopy-$(Get-Date -Format yyyyMMdd-HHmmss).log"

          # Exclude git, venvs, .env (we recreate from secret)
          $args = @(
            $src, $dst, '/MIR',
            '/XD', '.git', '.github\.git', '.github\workflows', '.venv',
            '/XF', '.env',
            '/R:3','/W:5','/NFL','/NDL','/NP','/NJH','/NJS','/NC','/NS'
          )

          Write-Host "Running: robocopy $($args -join ' ')"
          $p = Start-Process -FilePath robocopy.exe -ArgumentList $args -Wait -PassThru -NoNewWindow -RedirectStandardOutput $log
          $code = $p.ExitCode
          Get-Content $log | Write-Host

          if ($code -le 3) {
            Write-Host "RoboCopy completed with code $code (treated as success)."
          } else {
            throw "RoboCopy failed with exit code $code."
          }

      - name: Recreate .env from secret (multiline-safe)
        shell: powershell
        env:
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
        run: |
          $envFile = 'C:\agentic-trader\.env'
          if (-not $env:ENV_FILE_CONTENT) { throw "Secret ENV_FILE_CONTENT is empty or missing." }

          # Write exactly what’s in the secret (no extra comment lines)
          New-Item -ItemType File -Force -Path $envFile | Out-Null
          Set-Content -Path $envFile -Value $env:ENV_FILE_CONTENT -NoNewline -Encoding ASCII
          Write-Host ".env written to $envFile (size: $((Get-Item $envFile).Length) bytes)"

      - name: Setup Python venv and install deps
        shell: powershell
        run: |
          $root = 'C:\agentic-trader'
          Set-Location $root

          if (-not (Test-Path .venv)) {
            Write-Host "Creating venv..."
            C:\Users\Administrator\AppData\Local\Programs\Python\Python311\python.exe -3 -m venv .venv
          }

          & .\.venv\Scripts\python.exe -m pip install --upgrade pip
          if (Test-Path "$root\requirements.txt") {
            & .\.venv\Scripts\python.exe -m pip install -r requirements.txt
          } else {
            Write-Host "requirements.txt not found; installing core deps"
            & .\.venv\Scripts\python.exe -m pip install fastapi uvicorn pydantic python-dotenv pandas MetaTrader5 requests websockets wsproto
          }

      - name: Sanity check app imports
        shell: powershell
        run: |
          $py = 'C:\agentic-trader\.venv\Scripts\python.exe'
          $code = @"
              import os
                from dotenv import load_dotenv
                load_dotenv(r'C:\agentic-trader\.env')
                print('[env] PORT=', os.getenv('PORT'))
                print('[env] AGENT_SYMBOLS=', os.getenv('AGENT_SYMBOLS'))
                # Quick import smoke test
                import app.main
                print('[import] app.main OK')
            "@  
                & $py - << $code

      # --- Optional: manual control of services (keep disabled for now) ---
      # - name: Stop services (manual control)
      #   if: ${{ false }}
      #   shell: powershell
      #   run: |
      #     nssm stop AgenticTraderAPI
      #     nssm stop AgenticTraderAuto

      # - name: Start services (manual control)
      #   if: ${{ false }}
      #   shell: powershell
      #   run: |
      #     nssm start AgenticTraderAPI
      #     nssm start AgenticTraderAuto
